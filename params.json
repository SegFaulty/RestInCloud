{"name":"RestInCloud","tagline":"simple restfully dockerized distributed open source cloud backup server ;-)","body":"# RestInCloud RIC\r\n\r\nsimple restfully dockerized distributed open source cloud backup server ;-)\r\n\r\n\r\n## Client for CLI\r\n\r\nif your ric-servers are running, you can use the smart \"ric\" cli tool to backup etc. and manage the cluster\r\n\r\n[Client-README](src/Ric/Client/README.md)\r\n\r\n\r\n## Help\r\n\r\n * GET http://ric1.server/?help - show this help\r\n * GET http://ric1.server/?list - list all files ... &pattern=~regEx~i&limit=100&start=100&showDeleted=1 (ordered by random!)\r\n * GET http://ric1.server/?listDetails -  list all files with details - parameters like ?list\r\n * GET http://ric1.server/?info - show server infos (and quota if set)\r\n\r\n * PUT http://ric1.server/error.log - upload a file to the store\r\n   - use ?timestamp=1422653.. to set correct modificationTime [default:requestTime]\r\n   - use &retention=last3 to select the backup retention strategy [default:last3]\r\n   - use &noSync to suppress syncronisation to replication servers (used for internal sync)\r\n   - retention strategies (versions sorted by timestamp):\r\n{retentionList}\r\n   - with curl:\r\n     curl -X PUT --upload /home/www/phperror.log http://ric1.server/error.log\r\n     curl -X PUT --upload \"/home/www/phperror.log\" \"http://ric1.server/error.log&retention=last7&timestamp=1429628531\"\r\n\r\n * POST http://ric1.server/error.log?sha1=23423ef3d..&timestamp=1422653.. - check and refresh a file\r\n   - checks if version exists and updates timestamp\r\n   - returns 1 if version was updated, 0 if version not exists\r\n   - if 1 is returned, there is no need to upload the same version\r\n   - use &noSync to suppress syncronisation to replication servers (used for internal sync)\r\n   - if &noSync is not set, refresh is also performed on the replication servers (with &noSync)\r\n\r\n * POST http://ric1.server/error.log  ?action=delete  - delete a file !! Attention if version is omitted, ALL Versions will be deleted\r\n * DELETE http://ric1.server/error.log   - delete a file !! Attention if version is omitted, ALL Versions will be deleted\r\n\r\n\r\n * GET http://ric1.server/error.log - download a file (etag and lastmodified supported)\r\n * GET http://ric1.server/error.log?&version=13445afe23423423 - version selects a specific version, if omitted the latest version is assumed (must not: ...error.log?version... )\r\n * GET http://ric1.server/error.log?list - show all (or &limit) versions for this file; (ordered by latest); &showDeleted=1 to include files marked for deletion\r\n * GET http://ric1.server/error.log?size - return the filesize\r\n * GET http://ric1.server/error.log?check&minSize=40000&minReplicas=2&minTimestamp=14234234&sha=1234ef23\r\n    - check that the file\r\n    - (1) exists,\r\n    - (2) size >40k [default:1],\r\n    - (3) fileTime>=minTimestamp [default:8d],\r\n    - (4) min 2 replicas (3 files) [default:max(1,count(servers)-1)]\r\n    - (5) sha1, (if sha give, the size is irrelevant)\r\n    - returns json result with status: OK/WARNING/CRITICAL, a msg and fileInfo\r\n\r\n admin Commands:\r\n Post: with parameters: [action: addServer, addServer: s1.cs.io:3723]\r\n * addServer s1.cs.io:3723 - add Server to local list,\r\n * removeServer s1.cs.io:3723 - remove Server from local list\r\n * removeServer all - remove all Servers from local list\r\n * joinCluster s2.cs.io - join to existing cluster (or join a single node and create a cluster)\r\n * leaveCluster - leave a cluster (send removeServer=self to all cluster nodes an clear my servers list)\r\n * removeFromCluster s3.cs.io - kick a server from the servers list of all known nodes (use this if the server is unresponsive and you can't send a leaveCluster)\r\n\r\n\r\n auth (only as parameter supported yet)\r\n * use &token=YourAdminToken to authenticate as admin or writer or reader (e.g. for info command)\r\n\r\n serverVersion\r\n * use &minServerVersion=1.4.0 to require a minimal ServerVersion - it also acts reverse - if the client major version not matches the server major version - the request is rejected - to protect old clients from doing  mad things\r\n\r\n## Usecase\r\n\r\n### Backup a Dir\r\n\r\ndir to back up: /home/www/configs/\r\nserver identification: myServer\r\nencryption password: fooSecret\r\nricServer: ric1.server.de\r\nricWriterToke: barSecret\r\n\r\n####store the passwords\r\n\r\n\techo \"fooSecret\" > /home/www/ricPassFile.txt\r\n\tchmod 600 /home/www/ricPassFile.txt\r\n\techo \"barSecret\" > /home/www/ricWriterFile.txt\r\n\tchmod 600 /home/www/ricPassFile.txt\r\n\r\n#### cronjobs (with sic monitoring)\r\n\r\n    */5 * * * * /usr/local/sbin/ric backup /home/www/configs/ myServer-configs.tar.bz2 --retention=last7 --passFile=/home/www/ricPassFile.txt --prefix=myServer- --authFile=/home/www/ricWriterFile.txt --server=ric1.server.de 2>&1 >/dev/null | /usr/local/sbin/sic /myServer/ric-backup --STDINasCRITICAL\r\n    */2 * * * * /usr/local/sbin/ric check myServer-configs.tar.bz2 --prefix=myServer- --authFile=/home/www/ricWriterFile.txt --server=ric1.server.de --minTimestamp=-300  2>&1 >/dev/null | /usr/local/sbin/sic /myServer/ric-backup/check --STDINasCRITICAL\r\n\r\n#### manual actions\r\n\r\nshow versions\r\n\r\n    ric list myServer-configs.tar.bz2 --prefix=myServer- --authFile=/home/www/ricWriterFile.txt --server=ric1.server.de\r\n\r\n    ric check myServer-configs.tar.bz2 --prefix=myServer- --authFile=/home/www/ricWriterFile.txt --server=ric1.server.de --verbose\r\n\r\n\r\n\r\n## License\r\n\r\nThe MIT License (MIT)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}